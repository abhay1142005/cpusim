<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="new mach" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="OPCODE" type="required" numBits="4" relativity="absolute" signed="true" defaultValue="0" id="model.Field99d8a98">
	</Field>
	<Field name="ADDRESS" type="required" numBits="12" relativity="absolute" signed="true" defaultValue="0" id="model.Field68b53cf8">
	</Field>
	<Field name="operator" type="required" numBits="16" relativity="absolute" signed="true" defaultValue="0" id="model.Field7daa7f7">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register36a0c537" />
	<Register name="AR" width="16" initialValue="0" readOnly="false" id="model.module.Register57a9bb76" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register725d9621" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register664432da" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="model.module.Register7f96dcc0" />
	<Register name="INPR" width="8" initialValue="0" readOnly="false" id="model.module.Register56fdda58" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register4c15b9fa" />
	<Register name="OUPR" width="8" initialValue="0" readOnly="false" id="model.module.Register52e7c2c7" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register15f2f8a3" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register2de5df5f" />
	<Register name="TR" width="16" initialValue="0" readOnly="false" id="model.module.Register20437bd6" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="Carrybit" bit="0" register="model.module.Register664432da" halt="false" id="model.module.ConditionBit2276a89d" />
	<ConditionBit name="Haltbit" bit="0" register="model.module.Register2de5df5f" halt="true" id="model.module.ConditionBit21ea94ab" />

	<!--............. rams ..........................-->
	<RAM name="main ram" length="4096" cellSize="16" id="model.module.RAM1e406c1f" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="model.module.Register36a0c537" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet47f9da84" />
	<Set name="E&lt;-0" register="model.module.Register664432da" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet5ac466f0" />

	<!--............. test ..........................-->
	<Test name="IF I=0 DIRECT" register="model.module.Register7f96dcc0" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test2d9eca10" />
	<Test name="IF(AC=0) SKIP" register="model.module.Register36a0c537" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test4ef82c0b" />
	<Test name="IF(AC[15]=0) SKIP AC" register="model.module.Register36a0c537" start="15" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test666e0c68" />
	<Test name="IF(AC[15]=1) SKIP AC" register="model.module.Register36a0c537" start="15" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test6fcac7db" />
	<Test name="IF(E=0) SKIP" register="model.module.Register36a0c537" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test1640df34" />

	<!--............. increment .....................-->
	<Increment name="AC++" register="model.module.Register36a0c537" delta="1" id="model.microinstruction.Increment19573183" />
	<Increment name="PC++" register="model.module.Register15f2f8a3" delta="1" id="model.microinstruction.Incrementfcc638d" />

	<!--............. shift .........................-->
	<Shift name="AC&lt;-SHL AC" type="logical" source="model.module.Register36a0c537" destination="model.module.Register36a0c537" direction="left" distance="1" id="model.microinstruction.Shift653bf44" />
	<Shift name="AC&lt;-SHR AC " type="logical" source="model.module.Register36a0c537" destination="model.module.Register36a0c537" direction="right" distance="1" id="model.microinstruction.Shift6aef6408" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;-AC'" type="NOT" source1="model.module.Register36a0c537" source2="model.module.Register36a0c537" destination="model.module.Register36a0c537" id="model.microinstruction.Logical2f2e660d" />
	<Logical name="E&lt;-E'" type="NOT" source1="model.module.Register664432da" source2="model.module.Register664432da" destination="model.module.Register664432da" id="model.microinstruction.Logical3ef098c4" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-DR+AC" type="ADD" source1="model.module.Register725d9621" source2="model.module.Register36a0c537" destination="model.module.Register36a0c537" carryBit="model.module.ConditionBit2276a89d" id="model.microinstruction.Arithmetic682c73b3" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC[0]&lt;-E" source="model.module.Register36a0c537" srcStartBit="0" dest="model.module.Register36a0c537" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR27973dba" />
	<TransferRtoR name="AC[15]&lt;-E" source="model.module.Register664432da" srcStartBit="0" dest="model.module.Register36a0c537" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR71ef69e3" />
	<TransferRtoR name="AR&lt;-IR(0-11)" source="model.module.Register4c15b9fa" srcStartBit="0" dest="model.module.Register57a9bb76" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR6be7b162" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Register15f2f8a3" srcStartBit="0" dest="model.module.Register57a9bb76" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR2d2d67dd" />
	<TransferRtoR name="E&lt;-AC[0]" source="model.module.Register36a0c537" srcStartBit="0" dest="model.module.Register664432da" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1721ec04" />
	<TransferRtoR name="E&lt;-AC[15]" source="model.module.Register36a0c537" srcStartBit="0" dest="model.module.Register36a0c537" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR9c579b7" />
	<TransferRtoR name="I&lt;-IR(15)" source="model.module.Register4c15b9fa" srcStartBit="15" dest="model.module.Register7f96dcc0" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1d9d4bd7" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="Decode" ir="model.module.Register4c15b9fa" id="model.microinstruction.Decode3efb91d" />

	<!--............. set condition bit .............-->
	<SetCondBit name="HALT" bit="model.module.ConditionBit21ea94ab" value="0" id="model.microinstruction.SetCondBit45ba2532" />

	<!--............. io ............................-->
	<!-- none -->

	<!--............. memory access .................-->
	<MemoryAccess name="AR&lt;M[AR]" direction="read" memory="model.module.RAM1e406c1f" data="model.module.Register57a9bb76" address="model.module.Register57a9bb76" id="model.microinstruction.MemoryAccessa0d9eae" />
	<MemoryAccess name="DR&lt;-M[AR]" direction="read" memory="model.module.RAM1e406c1f" data="model.module.Register725d9621" address="model.module.Register57a9bb76" id="model.microinstruction.MemoryAccess5f344a3c" />
	<MemoryAccess name="IR&lt;-M[AR]" direction="read" memory="model.module.RAM1e406c1f" data="model.module.Register4c15b9fa" address="model.module.Register57a9bb76" id="model.microinstruction.MemoryAccess5de3a04d" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End7f496287" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR2d2d67dd" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess5de3a04d" />
		<Microinstruction microRef="model.microinstruction.Incrementfcc638d" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR6be7b162" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR1d9d4bd7" />
		<Microinstruction microRef="model.microinstruction.Decode3efb91d" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="ADD" opcode="1" instructionFormat="OPCODE ADDRESS" assemblyFormat="OPCODE ADDRESS" instructionColors="#a5f1ee #d2e3f0" assemblyColors="#a5f1ee #d2e3f0" >
		<Microinstruction microRef="model.microinstruction.Test2d9eca10" />
		<Microinstruction microRef="model.microinstruction.MemoryAccessa0d9eae" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess5f344a3c" />
		<Microinstruction microRef="model.microinstruction.Arithmetic682c73b3" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="7002" instructionFormat="operator" assemblyFormat="operator" instructionColors="#d3988e" assemblyColors="#d3988e" >
		<Microinstruction microRef="model.microinstruction.Test1640df34" />
		<Microinstruction microRef="model.microinstruction.Incrementfcc638d" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="7004" instructionFormat="operator" assemblyFormat="operator" instructionColors="#f9f4f2" assemblyColors="#f9f4f2" >
		<Microinstruction microRef="model.microinstruction.Test4ef82c0b" />
		<Microinstruction microRef="model.microinstruction.Incrementfcc638d" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="7008" instructionFormat="operator" assemblyFormat="operator" instructionColors="#a09dc5" assemblyColors="#a09dc5" >
		<Microinstruction microRef="model.microinstruction.Test6fcac7db" />
		<Microinstruction microRef="model.microinstruction.Incrementfcc638d" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="7010" instructionFormat="operator" assemblyFormat="operator" instructionColors="#f7a2c7" assemblyColors="#f7a2c7" >
		<Microinstruction microRef="model.microinstruction.Test666e0c68" />
		<Microinstruction microRef="model.microinstruction.Incrementfcc638d" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="7020" instructionFormat="operator" assemblyFormat="operator" instructionColors="#8f8b9c" assemblyColors="#8f8b9c" >
		<Microinstruction microRef="model.microinstruction.Increment19573183" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="7040" instructionFormat="operator" assemblyFormat="operator" instructionColors="#f7b988" assemblyColors="#f7b988" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR9c579b7" />
		<Microinstruction microRef="model.microinstruction.Shift653bf44" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR27973dba" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="7080" instructionFormat="operator" assemblyFormat="operator" instructionColors="#b0e5c5" assemblyColors="#b0e5c5" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR1721ec04" />
		<Microinstruction microRef="model.microinstruction.Shift6aef6408" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR71ef69e3" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="7001" instructionFormat="operator" assemblyFormat="operator" instructionColors="#eee8b9" assemblyColors="#eee8b9" >
		<Microinstruction microRef="model.microinstruction.SetCondBit45ba2532" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="7100" instructionFormat="operator" assemblyFormat="operator" instructionColors="#a795f7" assemblyColors="#a795f7" >
		<Microinstruction microRef="model.microinstruction.Logical3ef098c4" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="7200" instructionFormat="operator" assemblyFormat="operator" instructionColors="#b9f2b4" assemblyColors="#b9f2b4" >
		<Microinstruction microRef="model.microinstruction.Logical2f2e660d" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="7400" instructionFormat="operator" assemblyFormat="operator" instructionColors="#f8ddf4" assemblyColors="#f8ddf4" >
		<Microinstruction microRef="model.microinstruction.CpusimSet5ac466f0" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="7800" instructionFormat="operator" assemblyFormat="operator" instructionColors="#b1dde8" assemblyColors="#b1dde8" >
		<Microinstruction microRef="model.microinstruction.CpusimSet47f9da84" />
		<Microinstruction microRef="model.microinstruction.End7f496287" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM1e406c1f" startingAddress="33" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->

</Machine>
